<!doctype html>
<html lang='en'>

<head>
    <%- include('./partials/meta.ejs') %>
    <title>Shared API</title>
    <%- include('./partials/style.ejs') %>
    
</head>

<body class='line-numbers'>
    <div class='container mt-3'>

        <h1 class='text-center'>Chapter 6: Shared API</h1>
        <%- include('./partials/top_controls.ejs') %>
        
        <h2>Videos</h2>
        <ol>
            <h3><li>Process</li></h3> 
            <div class='border p-3 mb-3 hide'>
                <p>Process <a href="https://www.electronjs.org/docs/api/process">docs(electorn)</a></p>
                <p>Process <a href="https://nodejs.org/api/process.html">docs(nodejs)</a></p>
                <p>Process - represents a running node.js process. In our case the main process. Electron just adds some methods and objects to theis process. So, in this case we don't have to import something.</p>
                <p>Process in only avaliable to renderer process when {nodeIntegration: true}, i.e. nodeIntegration enabled.</p>
                <p>The following property is very useful: </p>
                <pre>
                    <code class='language-js match-braces'>
                       console.log(process.type) // either browser or renderer 
                    </code>
                </pre>
                <br>
                <ul>
                    Two exmaple:
                    <li>
                        <pre>
                            <code class='language-js match-braces'>
                               process.hang()
                            </code>
                        </pre>
                    </li>
                    <li>
                        <pre>
                            <code class='language-js match-braces'>
                               process.crash() // in index.html
                            </code>
                        </pre>
                        and in main.js 
                        <pre>
                            <code class='language-js match-braces'>
                               mainWindow.webContents.on('crashed', mainWindow.relaod);
                            </code>
                        </pre>
                    </li>
                </ul>
            </div>
            <h3><li>Screen</li></h3> 
            <div class='border p-3 mb-3 hide'>
                <p>Screen <a href="https://www.electronjs.org/docs/api/screen">docs</a></p>
                <p><b>electron.Screen</b> allows us to get detailed info about users display hardware.</p>
                <p>It includes screen dimention, cursor posistion, screen changes  etc.</p>
                <pre>
                    <code class='language-js match-braces'>
                        const displays = electron.remote.screen.getAllDisplays();

                        console.log( `${displays[0].size.width} X ${displays[0].size.height}` )
                        console.log( `${displays[0].bounds.x} , ${displays[0].bounds.y}` )
                        console.log( `${displays[1].size.width} X ${displays[1].size.height}` )
                        console.log( `${displays[1].bounds.x} , ${displays[1].bounds.y}` )
                    </code>
                </pre>
                <p>bounds are the posisiton of top-left corner of the displays w.r.t. the primary displays bound, and primary display's bounds are always 0,0</p>
                <br>
                <p>Exmaple of getting current cursor position:</p>
                <pre>
                    <code class='language-js match-braces'>
                        electron.remote.screen.getCursorScreenPoint()
                    </code>
                </pre>
                <br><br>
                <p>Creating a window with 1/4 th of the primary window. Notice line 1, 2, 8, 10</p>
                <pre>
                    <code class='language-js match-braces'>
                        const electron = require('electron');
                        const { app, BrowserWindow, ipcMain } = electron;
                        
                        let mainWindow;

                        function createWindow() {
                        
                          let primaryDisplay = electron.screen.getPrimaryDisplay();
                          mainWindow = new BrowserWindow({
                            width: primaryDisplay.size.width/2, height: primaryDisplay.size.height/2, x:primaryDisplay.bounds.x, y:primaryDisplay.bounds.y,
                            webPreferences: { nodeIntegration: true }
                          }) 
                        
                          mainWindow.loadFile('index.html');
                        
                          mainWindow.on('closed', () => {
                            mainWindow = null
                          })
                        }
                    </code>
                </pre>
            </div>
            <h3><li>Shell</li></h3> 
            <div class='border p-3 mb-3 hide'>
                <p>shell <a href="https://www.electronjs.org/docs/api/shell">docs</a></p>
                <p>Shell is a shared module.</p>
                <p>Some examples of shell is :</p>
                <ul>
                    <li>
                        Opening a url in default browser:
                        <pre>
                            <code class='language-js match-braces'>
                                const { shell } = require('electron');

                                const showSite = e => {
                                  shell.openExternal('https://electronjs.org')
                                }
                            </code>
                        </pre>
                    </li>
                    <li>
                        Opening an file through its default app:
                        <pre>
                            <code class='language-js match-braces'>
                                const splashPath = `${__dirname}/image.jpg`
                                const openSplash = e => {
                                  shell.openItem(splashPath)
                                }
                            </code>
                        </pre>
                    </li>
                    <li>
                        Opening the folder(file explorer) in which the file is present:
                        <pre>
                            <code class='language-js match-braces'>
                                const splashPath = `${__dirname}/image.jpg`
                                const openSplashFile = e => {
                                  shell.showItemInFolder(splashPath)
                                }
                            </code>
                        </pre>
                    </li>

                </ul>
            </div>
            <h3><li>NativeImage</li></h3> 
            <div class='border p-3 mb-3 hide'>
                <p>NativeImage <a href="https://www.electronjs.org/docs/api/native-image">docs</a></p>
                <p>Whenever electron returns an image it is of type nativeImage rather than an actual image.</p>
                <p>Convert an image to PNG format:</p>
                <pre>
                    <code class='language-js match-braces'>
                        const saveToDesktop = (data, ext) => {
                            let desktopPath = remote.app.getPath('desktop');
                            fs.writeFile( `${desktopPath}/splash.${ext}`, data, console.log); 
                        }
                        const toPng = e => {
                            let pngSplash = splash.toPNG();
                            saveToDesktop( pngSplash, 'png' )
                        }
                    </code>
                </pre>
                <br>
                <p>Convert an image to JPG format:</p>
                <pre>
                    <code class='language-js match-braces'>
                        const saveToDesktop = (data, ext) => {
                            let desktopPath = remote.app.getPath('desktop');
                            fs.writeFile( `${desktopPath}/splash.${ext}`, data, console.log); 
                        }
                        }
                        const toJpg = e => {
                            let jpgSplash = splash.toJPEG(100);
                            saveToDesktop( jpgSplash, 'jpg' )
                        }
                    </code>
                </pre>
                <br>
                <p>Converting an image to dataURL</p>
                <pre>
                    <code class='language-js match-braces'>
                        const toTag = e => {
                            let splashURL = splash.toDataURL();
                            document.getElementById('preview').src = splashURL;
                        }
                    </code>
                </pre>
                <p>dataURL <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs">docs</a></p>

                <br>
                <p>We can also resize the image during converting it to dataURL</p>
                <pre>
                    <code class='language-js match-braces'>
                        let size = splash.getSize();
                        const toTag = e => {
                            let splashURL = splash.resize({width:size.width/2, height:size.height/2}).toDataURL();
                            document.getElementById('preview').src = splashURL;
                        }
                    </code>
                </pre>
            </div>
            <h3><li>Clipboard</li></h3> 
            <div class='border p-3 mb-3 hide'>
                <p>Clipboard <a href="https://www.electronjs.org/docs/api/clipboard">docs</a></p>
                <p>Making the clipboard text conent in uppercase</p>
                <pre>
                    <code class='language-js match-braces'>
                        const makeUppercase = () => {
                            let cbText = clipboard.readText();
                            clipboard.writeText( cbText.toUpperCase() )
                        }
                    </code>
                </pre>

            </div>

        </ol>

        <%- include('./partials/bottom_controls.ejs') %>
        
    </div> 
    <%- include('./partials/scripts.ejs') %>
</body>

</html>
