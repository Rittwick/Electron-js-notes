<!doctype html>
<html lang='en'>

<head>
    <%- include('./partials/meta.ejs') %>
        <title>Main Process API</title>
        <%- include('./partials/style.ejs') %>

</head>

<body class='line-numbers'>
    <div class='container mt-3'>

        <h1 class='text-center'>Chapter 3: Main Process API</h1>
        <%- include('./partials/top_controls.ejs') %>

            <h2>Videos</h2>
            <ol>
                <h3>
                    <li>App</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <u>Electron API <a href="https://www.electronjs.org/docs/api">(docs)</a></u>
                    <ol>
                        <li>Controlled by Main Process</li>
                        <li>Controlled by Renderer Process</li>
                        <li>Controlled by Shared Modules</li>
                    </ol>
                    <p>There are some APIs are controlled by main process and can not be controlled by renderer process
                        and
                        <br> some APIs can be controlled by both main and renderer process and <br> simiraly some APIs
                        are
                        controlled by renderer process and can not be controlled by main process
                    </p>
                    <br><br>
                    <p><b>app</b> is the module in which we do not create an instance. Electron do this for us.</p>
                    app API <a href="https://www.electronjs.org/docs/api/app" target="_blank">docs</a>
                </div>
                <h3>
                    <li>BrowserWindow Getting Started</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <a href="https://www.electronjs.org/docs/api/browser-window" target="_blank">Docs Link</a>
                    <ol>
                        <li>
                            We can load local file as well as reomte urls too
                            <pre>
                            <code class='language-js match-braces'>
                                mainWindow.loadURL('https://google.com')
                            </code>
                        </pre>
                        </li>
                        <li>
                            Using
                            <pre>
                            <code class='language-js match-braces'>
                                mainWindow.on('closed', () => {
                                    mainWindow = null
                                  })
                            </code>
                        </pre>
                            this code, we can garbage collect the window when the window is closed.
                        </li>
                        <li>
                            There is a little gap(flicker window) between the window <b>shows up</b> and the index.html
                            file
                            <b>loads</b>. We can tackle this in two ways:
                            <ol>
                                <li>
                                    Set <b>show to false: </b>
                                    <pre>
                                    <code class='language-js match-braces'>
                                        mainWindow = new BrowserWindow({
                                            width: 1000, height: 800,
                                            webPreferences: { nodeIntegration: true },
                                            show: false,
                                        })
                                    </code>
                                </pre>
                                    and add the following listener:
                                    <pre>
                                    <code class='language-js match-braces'>
                                        mainWindow.once('ready-to-show', mainWindow.show);
                                    </code>
                                </pre>
                                </li>
                                <li>
                                    Setting the backgroud color of the html page and the BrowserWindow same:
                                    <pre>
                                    <code class='language-js match-braces'>
                                        mainWindow = new BrowserWindow({
                                            width: 1000, height: 800,
                                            webPreferences: { nodeIntegration: true },
                                            backgroundColor: 'cyan'
                                          })
                                    </code>
                                </pre>
                                    and
                                    <pre>
                                    <code class='language-js match-braces'>
                                        <style>
                                            body{
                                              background-color: cyan;
                                              height: 100%;
                                            }
                                          </style>
                                    </code>
                                </pre>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </div>
                <h3>
                    <li>BrowserWindow Parent & Child Windows</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <a href="https://www.electronjs.org/docs/api/browser-window#parent-and-child-windows"
                        target="_blank">Docs link</a>
                    <pre>
                    <code class='language-js match-braces'>
                        mainWindow = new BrowserWindow({
                            width: 1000, height: 800,
                            webPreferences: { nodeIntegration: true },
                          })
                        
                          secondaryWindow = new BrowserWindow({
                            width: 600, height: 300,
                            webPreferences: { nodeIntegration: true },
                            parent: mainWindow,
                            modal: true,
                            show: false
                          })
                    </code>
                </pre>
                    <p><b>line 9</b> is used to create the child renderer process of parent renderer process.</p>
                    <p><b>modal: true</b> is used to create child renderer process as a modal.</p>
                </div>
                <h3>
                    <li>BrowserWindow Frameless Window</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <a href="https://www.electronjs.org/docs/api/frameless-window">Docs Link</a>
                    <pre>
                    <code class='language-js match-braces'>
                        mainWindow = new BrowserWindow({
                            width: 1000, height: 800,
                            frame: false,
                            webPreferences: { nodeIntegration: true },
                          })
                    </code>
                </pre>
                    Set <b>frame: false</b>, to make a frameless window <br>
                    <p>To drag the frame less window, the following have to be done in index.html</p>
                    <pre>
                    <code class='language-js match-braces'>
                        &lt;body style="user-select: none; -webkit-app-region:drag"&gt;
                        and 
                        &lt;input style="-webkit-app-region:no-drag;" type="range" name="range" id="range" min="0" max="10"&gt;
                       
                    </code>
                </pre>
                </div>
                <h3>
                    <li>BrowserWindow Properties, Methods & Events</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <a href="https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions">Go to docs</a>
                    There are the following things:
                    <ul>
                        <li>Instance Events</li>
                        <li>Static Methods</li>
                        <li>Instance Properties</li>
                        <li>Instance Methods</li>
                    </ul>
                </div>
                <h3>
                    <li>BrowserWindow Window State</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p><b>npm install --save electron-window-state</b> a library to store and re</p>
                    <p>After resizing, moving the window if it is closed, its previous state is destroyed and it is
                        reopened
                        by <b>rs</b> command, a new window at its default postion is opened, to resotre its previous
                        postion
                        the above library is necessary</p>
                    <p>To apply the library, we need to follow the below steps</p>
                    <ol>
                        <li>
                            <pre>
                            <code class='language-js match-braces'>
                                const windowStateKeeper = require('electron-window-state')
                            </code>
                        </pre>
                        </li>
                        <li>
                            Notice line number (2,3,4,5) ; (7,8) ; and 12
                            <pre>
                            <code class='language-js match-braces'>
                                function createWindow() {
                                    let winState = windowStateKeeper({
                                      defaultHeight: 1000,
                                      defaultWidth: 1000 
                                    })
                                    mainWindow = new BrowserWindow({
                                      width: winState.width, height: winState.height,
                                      x: winState.x, y: winState.y,
                                      webPreferences: { nodeIntegration: true },
                                    })
                                    mainWindow.loadFile('index.html')
                                    winState.manage(mainWindow);
                                    mainWindow.setMenuBarVisibility(false);
                                    mainWindow.on('closed', () => {
                                      mainWindow = null
                                    })
                                }
                                  
                            </code>
                        </pre>
                        </li>
                    </ol>
                </div>
                <h3>
                    <li>BrowserWindow webContents</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    Go to <a href="https://www.electronjs.org/docs/api/web-contents">docs webContents</a>
                    <p>Despite being a property of BrowserWindow module, <b>webContents</b> itself is a module</p>
                    <p>webContents can be used in following two ways:</p>
                    <ul>
                        <li>
                            As a module itself:
                            <pre>
                            <code class='language-js match-braces'>
                                const { app, BrowserWindow, webContents } = require('electron')
                            </code>
                        </pre>
                            one example of this is:
                            <pre>
                            <code class='language-js match-braces'>
                                webContents.getAllWebContents()
                            </code>
                        </pre>
                        </li>
                        <li>
                            Using it as a method:
                            <pre>
                            <code class='language-js match-braces'>
                                wc.on('dom-ready', ()=>{
                                    console.log('dom is ready');
                                })
                                wc.on('did-finish-load', ()=>{
                                    console.log('load finished');
                                })
                            
                                wc.on('new-window', (e, url)=>{
                                    e.preventDefault();
                                    console.log(`Creating new window for url: ${url}`)
                                })
                            </code>
                        </pre>
                        </li>
                    </ul>
                    <p>webContents in renderer process can be hang but the main process will be fine.</p>
                    <p>An exmaple of basic authentication (<a
                            href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication">more here</a>)</p>
                    <pre>
                    <code class='language-js match-braces'>
                        mainWindow.loadURL('https://httpbin.org/basic-auth/user/passwd')
                      
                        let wc = mainWindow.webContents;
                      
                        wc.on('login', (e, request, authInfo, callback)=>{
                          console.log('Loggin in : ');
                          callback('user', 'passwd');
                        })
                      
                        wc.on('did-navigate', (e, url, statusCode, message)=>{
                          console.log(`Navigated to ${url}, with response ${statusCode}`)
                          console.log('Message'+message);
                        })
                    </code>
                </pre>


                    <br>
                    <p>An example of media events</p>
                    <pre>
                    <code class='language-js match-braces'>
                        let wc = mainWindow.webContents;

                        wc.on('media-started-playing', ()=>console.log('video started'));
                        wc.on('media-paused', ()=>  console.log('video paused'));
                    </code>
                </pre>
                    <br>
                    <p>An mini example of context menu events</p>
                    <pre>
                    <code class='language-js match-braces'>
                        wc.on('context-menu', (e, params)=>{
                            console.log(`conext menu opened on: ${params.mediaType} on x:${params.x} y:${params.y}`)
                            console.log(`User selected text: ${params.selectionText}`)
                            console.log(`Selection can be copied: ${params.editFlags.canCopy}`)
                            let selectedText = params.selectionText;
                            wc.executeJavaScript(`alert("${selectedText}")`);
                        })
                    </code>
                </pre>
                </div>
                <h3>
                    <li>Session Getting Started</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>Session <a href="https://www.electronjs.org/docs/api/session">docs</a></p>
                    <p>Default session is shared among renderer processes: </p>
                    <pre>
                    <code class='language-js match-braces'>
                        let ses = mainWindow.webContents.session;
                        let ses2 = secWindow.webContents.session;
                        console.log( Object.is(ses, ses2)) // this is true, this checks if ses and ses2 refers to the same object reference
                    </code>
                </pre>
                    <p>The default session also can be assessed in following way:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        let defaultSes = session.defaultSession
                    </code>
                </pre>
                    <br>
                    <p>We can create our own session: notice line 1,4,14 </p>
                    <pre>
                    <code class='language-js match-braces'>
                        const { session } = require('electron')
                        function createWindow() {
  
                            let customSes = session.fromPartition('part1');
                          
                            mainWindow = new BrowserWindow({
                              width: 500, height: 500,
                              x: 2200, y: 50,
                              webPreferences: { nodeIntegration: true },
                            })
                            secWindow = new BrowserWindow({
                              width: 550, height: 250,
                              x: 2200, y: 350,
                              webPreferences: { nodeIntegration: true, session: customSes },
                            })
                           
                            // more code 
                        }
                    </code>
                </pre>
                    <p>The default session is persistent but the custom session is not persistent, i.e. custom session
                        gets cleared when the app restarts</p>
                    <p>To make the custom session persistent, the following is to be done: </p>
                    <pre>
                    <code class='language-js match-braces'>
                        let customSes = session.fromPartition('persist:part1');
                    </code>
                </pre>
                    <p>A shortcut is available for this: remove line 4 and modify line 14 as following</p>
                    <pre>
                    <code class='language-js match-braces'>
                        const { session } = require('electron')
                        function createWindow() {
  
                            // let customSes = session.fromPartition('part1');
                          
                            mainWindow = new BrowserWindow({
                              width: 500, height: 500,
                              x: 2200, y: 50,
                              webPreferences: { nodeIntegration: true },
                            })
                            secWindow = new BrowserWindow({
                              width: 550, height: 250,
                              x: 2200, y: 350,
                              webPreferences: { nodeIntegration: true, partition: 'persist:part1' },
                            })
                           
                            // more code 
                        }
                    </code>
                </pre>
                    <p>In the above code, the phrase <b>partition: 'persist:part1'</b> means is the par1 partition does
                        not exist then create and use it.</p>
                    <br>
                    <p>The session storage can be cleared using:</p>
                    <pre>
                    <code class='language-js match-braces'>
                       ses.clearStorageData();
                    </code>
                </pre>
                </div>
                <h3>
                    <li>Session Cookies</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    Cookies <a href="https://www.electronjs.org/docs/api/cookies">docs</a>
                    <p>Cookies are <br>electron.BrowserWindow.webContents.session.cookies</p>
                    <br>
                    <p>Example: Checking the cookies of 'github.com'</p>
                    <pre>
                    <code class='language-js match-braces'>
                        // Modules
                        const { app, BrowserWindow, webContents, session } = require('electron')
                        
                        let mainWindow;
                        
                        
                        function createWindow() {
                          
                          let ses = session.defaultSession;
                        
                          let getCookies = ()=>{
                            ses.cookies.get({}, (err, cookies)=>{  // '{}' means get all cookies, and 'cookies are array of cookies
                              console.log(cookies);
                            })
                          }
                        
                          mainWindow = new BrowserWindow({
                            width: 500, height: 500,
                            x: 2200, y: 50,
                            webPreferences: { nodeIntegration: true },
                          })
                        
                         
                          mainWindow.loadURL('https://github.com');
                        
                          // mainWindow.webContents.openDevTools();
                        
                          mainWindow.on('closed', () => {
                            mainWindow = null
                          })
                        
                          mainWindow.webContents.on('did-finish-load', (e)=>{
                            getCookies();
                          })
                        
                        }
                    </code>
                </pre>
                    <br>
                    <p>Setting cookies:</p>
                    <ol>
                        <li>
                            <pre>
                            <code class='language-js match-braces'>
                                let cookie = { url: 'https://myappdomain.com', name: 'cookie1', value: 'electron'}

                                ses.cookies.set(cookie, err => {
                                  console.log('cookie1 set');
                                  getCookies();
                                })
                            </code>
                        </pre>
                            As there is not 'expirationData' set in the 'cookie', this cookie gets expired as soon as
                            the sesson is end, the app restarts. In this case automatically session is set to true :
                            <b>session: true</b>
                        </li>
                        <li>
                            <pre>
                            <code class='language-js match-braces'>
                                let cookie = { url: 'https://myappdomain.com', name: 'cookie1', value: 'electron',expirationDate: 1651769147.094634}

                                ses.cookies.set(cookie, err => {
                                  console.log('cookie1 set');
                                  getCookies();
                                })
                            </code>
                        </pre>
                            As the 'expirationData' date is set to a value, this automatically expire as the time
                            arrives. and in this case the automatically 'session' is set to false.
                        </li>
                    </ol>
                    <br>
                    <p>Getting cookies:</p>
                    <p>To get specific cookies we have to pass filters, below is an example, we can also passes, url,
                        domain etc.</p>
                    <pre>
                    <code class='language-js match-braces'>
                        ses.cookies.get({ name:'cookie1'}, (err, cookies) => {  // '{}' means get all cookies, and 'cookies are array of cookies
                        console.log(cookies);
                      })
                    </code>
                </pre>
                    <br>
                    <p>Removing cookies:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        ses.cookies.remove('https://myappdomain.com', 'cookie1', err=>{
                            // code
                        })
                    </code>
                </pre>
                </div>
                <h3>
                    <li>Session DownloadItem</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>DownloadItem <a href="https://www.electronjs.org/docs/api/download-item">docs</a></p>
                    <p>An example:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        const { app, BrowserWindow, webContents, session } = require('electron')

                        let mainWindow;


                        function createWindow() {

                            let ses = session.defaultSession;

                            // other necesssary codes

                            ses.on('will-download', (e, downloadItem, webContents)=>{
                                // console.log('Start downloading');
                                // console.log(downloadItem.getFilename());
                                // console.log(downloadItem.getTotalBytes());
                            
                                let fileName = downloadItem.getFilename();
                                let fileSize = downloadItem.getTotalBytes();
                            
                                //Save to desktop
                                downloadItem.setSavePath(app.getPath('desktop')+`/${fileName}`);
                            
                            })

                            // other necesssary codes

                        }
                    </code>
                </pre>
                    <br>
                    <p>Downloading large files example: </p>
                    in main.js
                    <pre>
                    <code class='language-js match-braces'>
                        ses.on('will-download', (e, downloadItem, webContents)=>{
                            console.log('Downloading will start')
                            let fileName = downloadItem.getFilename();
                            let fileSize = downloadItem.getTotalBytes();
                        
                            //Save to desktop
                            downloadItem.setSavePath(app.getPath('desktop')+`/${fileName}`);
                        
                            downloadItem.on('updated', (e, state)=>{
                        
                        
                              let recived = downloadItem.getReceivedBytes();
                        
                              if(state === 'progressing' && recived)
                              {
                                let progress = Math.round((recived/fileSize)*100);
                                webContents.executeJavaScript(`window.progress.value = ${progress}`)
                                console.log(progress);
                              }
                            })
                          })
                    </code>
                </pre>
                    and in 'index.html'
                    <pre>
                    <code class='language-js match-braces'>
                        &lt;h2&gt;&lt;a download='myimage.jpg' href="lg.png" &gt;Download Image&lt;/a&gt;&lt;/h2&gt;
                        &lt;progress value="0" max="100" id="progress"&gt;&lt;/progress&gt;
                      
                        &lt;script&gt;
                          window.progress = document.getElementById('progress');
                        &lt;/script&gt;
                    </code>
                </pre>
                </div>
                <h3>
                    <li>Dialog</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    Dialog <a href="https://www.electronjs.org/docs/api/dialog">docs</a>
                    <p>Dialouges are blocking, i.e. the code flow is blocked untill dialouge box is closed.</p>
                    <ul>
                        Examples:
                        <li>
                            Exmaple 1: <br>
                            Dialogues should be open after the dom load is finished
                            <pre>
                            <code class='language-js match-braces'>
                                mainWindow.webContents.on('did-finish-load', ()=>{
                                    dialog.showOpenDialog(mainWindow, {
                                        buttonLabel: 'Select a image',
                                        defaultPath: app.getPath('pictures'),
                                        properties: ['multiSelections', 'openDirectory', 'openFile']
                                    }, filepaths => {
                                        console.log(filepaths)
                                    })
                                })
                            </code>
                        </pre>
                        </li>
                        <li>
                            Example 2:
                            <pre>
                            <code class='language-js match-braces'>
                                dialog.showSaveDialog({}, filename=>{
                                    console.log(filename);
                                  })
                            </code>
                        </pre>
                        </li>
                        <li>
                            Example 3:
                            <pre>
                            <code class='language-js match-braces'>
                                const answers = ['Yes', 'No', 'May Be', 'Never']
                                dialog.showMessageBox({
                                  title: 'Message box',
                                  message: 'Please select an option',
                                  detail: 'message details',
                                  buttons:answers
                                }, response => {
                                  console.log(`User selected: ${answers[response]}`)
                                })
                            </code>
                        </pre>
                        </li>
                    </ul>
                </div>
                <h3>
                    <li>Accelerator & globalShortcut</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>globalShortcut <a href="https://www.electronjs.org/docs/api/global-shortcut">docs</a></p>
                    <p>Accelerator <a href="https://www.electronjs.org/docs/api/accelerator">docs</a></p>
                    <p>Global shortcut: means the app has to just running, need not to be in focus.</p>
                    <p>Accelerators are strings that are the key for the shortcuts</p>
                    <p>Registering a globalShortcut:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        globalShortcut.register('CommandOrControl+G', ()=>{
                            console.log('Ctrl + G is pressed');
                        })
                    </code>
                </pre>
                    <br>
                    <p>Unregistering a shortcut immediately after using it: </p>
                    <pre>
                    <code class='language-js match-braces'>
                        globalShortcut.register('CommandOrControl+G', ()=>{
                            console.log('Ctrl + G is pressed');
                            globalShortcut.unregister('CommandOrControl+G');
                        })
                    </code>
                </pre>
                </div>
                <h3>
                    <li>Menu & MenuItem</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>An instance of <b>Menu</b> will be populated with some <b>MenuItem</b>s</p>
                    <p>Menu <a href="https://www.electronjs.org/docs/api/menu">docs</a></p>
                    <p>MenuItem <a href="https://www.electronjs.org/docs/api/menu-item">docs</a></p>
                    <ul>
                        <li>
                            Basic menu: <br>
                            <ol>
                                <li>Step 1: Import 'Menu' and 'MenuItem'</li>
                                <li>Step 2: Create an instance of 'Menu'; line 5</li>
                                <li>Step 3: Create instance of 'MenuItem'; line 6</li>
                                <li>Step 4: Append the menuItem instance to the instance of Menu</li>
                                <li>Step 5: Set the mainMenu to the app</li>
                            </ol>
                            <pre>
                            <code class='language-js match-braces'>
                                const { app, BrowserWindow, Menu, MenuItem } = require('electron')
        
                                let mainWindow;
                                
                                let mainMenu = new Menu();
                                let menuItem1 = new MenuItem({ label: 'Electron' });
                                
                                mainMenu.append(menuItem1);
                                
                                function createWindow() {
                                
                                  mainWindow = new BrowserWindow()
                                
                                  mainWindow.loadFile('index.html');
                                
                                  Menu.setApplicationMenu(mainMenu);
                                
                                  mainWindow.on('closed', () => {
                                    mainWindow = null
                                  })
                                
                                }
                                
                            </code>
                        </pre>
                        </li>
                        <li>
                            <p>Now instead of creating menuItem one by one and appending them to the mainMenu careate
                                the menuItems form the template as following:</p>
                            <pre>
                            <code class='language-js match-braces'>
                                let menuItem1 = new MenuItem({
                                    label: 'Electron',
                                    submenu: [
                                      { label: 'Item 1' },
                                      { label: 'Item 2', submenu: [ {label: 'Sub Item 1' }, {label: 'Sub Item 2' } ] },
                                      { label: 'Item 3' },
                                    ]
                                });
                            </code>
                        </pre>
                            <pre>
                            <code class='language-js match-braces'>
                                const { app, BrowserWindow, Menu, MenuItem } = require('electron')

                                let mainWindow;
                                
                                let mainMenu = new Menu();
                                let menuItem1 = new MenuItem({
                                  label: 'Electron',
                                  submenu: [
                                    { label: 'Item 1' },
                                    { label: 'Item 2', submenu: [ {label: 'Sub Item 1' }, {label: 'Sub Item 2' } ] },
                                    { label: 'Item 3' },
                                  ]
                                });
                                
                                mainMenu.append(menuItem1);
                                
                                function createWindow() {
                                
                                  mainWindow = new BrowserWindow()
                                
                                  mainWindow.loadFile('index.html');
                                
                                  Menu.setApplicationMenu(mainMenu);
                                
                                  mainWindow.on('closed', () => {
                                    mainWindow = null
                                  })
                                
                                }
                            </code>
                        </pre>
                        </li>
                        <li>
                            <p>Creating submenus:</p>
                            <pre>
                            <code class='language-js match-braces'>
                                let menuItem1 = new MenuItem({
                                    label: 'Electron',
                                    submenu: [
                                      { label: 'Item 1' },
                                      { label: 'Item 2', submenu: [ {label: 'Sub Item 1' }, {label: 'Sub Item 2' } ] },
                                      { label: 'Item 3' },
                                    ]
                                  });
                            </code>
                        </pre>
                        </li>
                        <li>
                            <p>Further shortcut can be applied, i.e. we can directly build the menuItems from the Menu
                            </p>
                            <pre>
                            <code class='language-js match-braces'>
                                let mainMenu = Menu.buildFromTemplate([
                                {
                                  label: 'Electron',
                                  submenu: [
                                    { label: 'Item 1' },
                                    { label: 'Item 2', submenu: [ {label: 'Sub Item 1' } ]},
                                    { label: 'Item 3'},
                                  ]
                                },
                                {
                                  label: 'Actions',
                                  submenu: [
                                    { label: 'Action 1' },
                                    { label: 'Action 2' },
                                    { label: 'Action 3' },
                                  ]
                                }
                              ]);
                            </code>
                        </pre>
                        </li>
                        <li>
                            <p>Now we can export the menu template code to another file and import from there to use it
                            </p>
                            <pre>
                            <code class='language-js match-braces'>
                                let mainMenu = Menu.buildFromTemplate( require('./mainMenu'));
                            </code>
                        </pre>
                            and in 'mainMenu.js'
                            <pre>
                            <code class='language-js match-braces'>
                                module.exports = [
                                {
                                  label: 'Electron',
                                  submenu: [
                                    { label: 'Item 1' },
                                    { label: 'Item 2', submenu: [ {label: 'Sub Item 1' } ]},
                                    { label: 'Item 3'},
                                  ]
                                },
                                {
                                  label: 'Actions',
                                  submenu: [
                                    { label: 'Action 1' },
                                    { label: 'Action 2' },
                                    { label: 'Action 3' },
                                  ]
                                }
                              ]
                            </code>
                        </pre>
                        </li>
                        <li>
                            To add event listeners to the menu items:
                            <pre>
                            <code class='language-js match-braces'>
                                { 
                                    label: 'Action 3',
                                    click: ()=>{ console.log('Hello from main menu') },
                                },
                            </code>
                        </pre>
                        </li>
                        <li>
                            To add shortcuts to the menu items:
                            <pre>
                            <code class='language-js match-braces'>
                                { 
                                    label: 'Greet',
                                    click: ()=>{ console.log('Hello from main menu') },
                                    accelerator: 'Shift+Alt+G'
                                },
                            </code>
                        </pre>
                            the menuItems shortcuts is enabled only when tha app is in focus
                        </li>
                        <li>
                            To disable some actions:
                            <pre>
                            <code class='language-js match-braces'>
                                { 
                                    label: 'Action 2',
                                    enabled: false
                                },
                            </code>
                        </pre>
                        </li>
                        <li>
                            We can assign roles to menuItems (<a
                                href="https://www.electronjs.org/docs/api/menu-item#roles">docs</a>):

                            <ul>
                                <li>
                                    <pre>
                                    <code class='language-js match-braces'>
                                        { 
                                            label: 'DevTools',
                                            role: 'toggleDevTools'
                                        },
                                    </code>
                                </pre>
                                </li>
                                <li>
                                    The label tag can be omitted here, eg.
                                    <pre>
                                    <code class='language-js match-braces'>
                                        {
                                            role: 'toggleFullScreen'
                                        },
                                    </code>
                                </pre>
                                </li>
                                <li>
                                    Another example:
                                    <pre>
                                    <code class='language-js match-braces'>
                                        {
                                            label: 'Edit', 
                                            submenu: [
                                                { role: 'Undo' },
                                                { role: 'Redo' },
                                                { role: 'Copy' },
                                                { role: 'Paste' },
                                            ]
                                        }
                                    </code>
                                </pre>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <h3>
                    <li>Menu Context Menu</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>We know i) 'context-menu' event listener in webContents and ii)menu and menuItems, now combinint
                        these two thing we can create context menus:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        const { app, BrowserWindow, Menu } = require('electron')

                        let mainWindow;
                        
                        let contextMenu = Menu.buildFromTemplate([
                          { 
                              label: 'Item 1',
                          },
                          {
                              role: 'editMenu'
                          }
                        ]);
                        
                        
                        function createWindow() {
                        
                          mainWindow = new BrowserWindow()
                        
                          mainWindow.loadFile('index.html');
                        
                          mainWindow.webContents.on('context-menu', (e, params)=>{
                            contextMenu.popup()
                          })
                        
                          mainWindow.on('closed', () => {
                            mainWindow = null
                          })
                        
                        }                        
                    </code>
                </pre>
                </div>
                <h3>
                    <li>Tray</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>Tray <a href="https://www.electronjs.org/docs/api/tray">docs</a></p>
                    <p><b>electron.Tray</b> <a href="">docs</a></p>
                    <ol>
                        There are two ways to use taskbar entry
                        <li>Attach a menu to it</li>
                        <li>Listen for various clicks to task bar icon</li>
                    </ol>
                    <p>In order to use the tray instance we've to create a global instance of the tray instance exactly
                        same as we do for mainWindow</p>
                    <pre>
                    <code class='language-js match-braces'>
                        let mainWindow, tray;
                    </code>
                </pre>
                    <br>
                    <p>We have to also create a function for that tray instance.</p>
                    <small>Tray constructor takes the image as input.<span>nativeImage <a
                                href="https://www.electronjs.org/docs/api/native-image">docs</a></span> <span><a
                                href="https://www.danrodney.com/blog/retina-web-graphics-explained-1x-versus-2x-low-res-versus-hi-res/">another
                                doc</a></span></small>
                    <pre>
                    <code class='language-js match-braces'>
                        function createTray() {
                            tray = new Tray('trayTemplate@2x.png');
                          }
                    </code>
                </pre>
                    and then call the function when app is ready, so call it from createWindow()
                    <pre>
                    <code class='language-js match-braces'>
                        function createWindow() {

                            createTray();
                          
                            mainWindow = new BrowserWindow()
                          
                            mainWindow.loadFile('index.html');
                          
                            mainWindow.on('closed', () => {
                              mainWindow = null
                            })
                        }
                    </code>
                </pre>
                    <br>
                    <p>We can also add a tool tip to the tray icon.</p>
                    <pre>
                    <code class='language-js match-braces'>
                        function createTray() {
                            tray = new Tray('trayTemplate@2x.png');
                            tray.setToolTip('Tray Details');
                        }                          
                    </code>
                </pre>
                    <br>
                    <p>Then we can add a click event listener to the tray icon</p>
                    <pre>
                    <code class='language-js match-braces'>
                        function createTray() {
                            tray = new Tray('trayTemplate@2x.png');
                            tray.setToolTip('Tray Details');
                            tray.on('click', (e)=>{
                                mainWindow.isVisible() ? mainWindow.hide() : mainWindow.show();
                            }
                        }                          
                    </code>
                </pre>
                    <br>
                    <p>Instead of click event listener we can add a context menu to the tray icon.</p>
                    <pre>
                    <code class='language-js match-braces'>
                    let trayMenu = Menu.buildFromTemplate([
                        { label: 'Item 1', },
                        { role: 'quit' }
                    ]);
                      
                    function createTray() {
                        tray = new Tray('trayTemplate@2x.png');
                        tray.setToolTip('Tray Details');
                        tray.setContextMenu(trayMenu)
                    }
                    </code>
                </pre>
                    <br>
                    <p><i>If we keep both the click listner and the context menu then, click listener will be
                            ignored.</i></p>
                </div>
                <h3>
                    <li>PowerMonitor</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>PowerMonitor <span><a href="https://www.electronjs.org/docs/api/power-monitor">docs</a></span>
                    </p>
                    <p>PowerMonitor can be imported only when the app is ready, so we have to do the following
                        modification:</p>
                    <p>In line 1, the electorn module is imported and in line 16 and 19, when the app is ready,
                        powerMonitor module is imported and used.</p>
                    <pre>
                    <code class='language-js match-braces'>
                        const electron = require('electron');
                        const { app, BrowserWindow } = electron;
                        
                        let mainWindow;
                        
                        function createWindow() {
                        
                          mainWindow = new BrowserWindow()
                        
                          mainWindow.loadFile('index.html');
                        
                          mainWindow.on('closed', () => {
                            mainWindow = null
                          })
                        
                          electron.powerMonitor.on('on-battery', ()=>{
                            console.log('charger disconnected');
                          })
                          electron.powerMonitor.on('on-ac', ()=>{
                            console.log('charger connected');
                          })
                        
                        }
                    </code>
                </pre>
                </div>

            </ol>

            <%- include('./partials/bottom_controls.ejs') %>

    </div>
    <%- include('./partials/scripts.ejs') %>

</body>

</html>

