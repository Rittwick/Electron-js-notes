<!doctype html>
<html lang='en'>

<head>
    <%- include('./partials/meta.ejs') %>
    <title>Developing With Electron</title>
    <%- include('./partials/style.ejs') %>
    
</head>

<body class='line-numbers'>
    <div class='container mt-3'>

        <h1 class='text-center'>Chapter 2: Developing With Electron</h1>
        <%- include('./partials/top_controls.ejs') %>
        
        <h2>Videos</h2>
        <ol>

          <h3>
            <li>Install & Run</li>
          </h3>
          <div class='border p-3 mb-3 hide'>
            <ol>
              <li><b>Install Electron</b></li>
              Electron can be ran in two ways:
              <ol>
                <li>Dev dependencies: npm i -D electron</li>
                <li>Global dependencies: npm i -g electron</li>
              </ol>
              Entry point of the electron is main.js as specified in package.json <br>
              `npm list --depth=0` lists out the dependencies at first level <br>
              To start the electron project use command `npm start` <br>
              <li><b>Project Structure</b></li>
              <li><b>Developing with Electron</b></li>
            </ol>
          </div>
          <h3>
            <li>App Structure</li>
          </h3>
          <div class='border p-3 mb-3 hide'>
            <p>Electron has two type of processes i) Main process, ii) Renderer Process</p>
            <p>Main process is a node.js process</p>
            <p>Renderer process is a chrominum browser instance</p>
            <p>Main process can create multiple Renderer processes</p>
            <p>Main process is backend and renderer process is front end</p>
            <p>Every time we change something in main.js, the app has to be restarted to reflect the changes</p>
            <pre>
                      <code class="language-js match-braces">
                        // Modules
                        const {app, BrowserWindow} = require('electron')
    
                        // Keep a global reference of the window object, if you don't, the window will
                        // be closed automatically when the JavaScript object is garbage collected.
                        let mainWindow
    
                        // Create a new BrowserWindow when `app` is ready
                        function createWindow () {
    
                          mainWindow = new BrowserWindow({
                            width: 1000, height: 800,
                            webPreferences: { nodeIntegration: true }
                          })
    
                          // Load index.html into the new BrowserWindow
                          mainWindow.loadFile('index.html')
                          }
    
                        // Electron `app` is ready
                        app.on('ready', createWindow)
    
                      </code>
                    </pre>
            <p><b>createWindow</b> process creates a new renderer process when the app is <b>ready</b>. We must wait till
              the app is ready before creating any rendeer process.</p>
            <p><b>BrowserWindow</b> creates the renderer process.</p>
            <p><b>{ nodeIntegration: true }</b> allows us to use node modules inside the <b>index.html</b></p>
            <p>Using <b>loadFile</b> the 'index.html' file is loaded in renderer process</p>
          </div>
          <h3>
            <li>Using Native Node Modules</li>
          </h3>
          <div class='border p-3 mb-3 hide'>
            <p>'Native' means 'compiled'</p>
            <p>Instead saying using node packages in electron we should say to use node modules in node js app</p>
            <p>eg1: `npm i colors` then the below code:</p>
            <pre>
              <code class="language-js match-braces">
                // Modules
                const { app, BrowserWindow } = require('electron')
                const colors = require('colors');
    
                console.log(colors.rainbow('Hello world'));
                
                // more code 
              </code>
            </pre>
    
            <p>eg2: `npm i bcrypt`, now, `npm start` will give an version produced error. To solve this type of error we've to use 'electron-rebuild', 'npm i -g electron-rebuild', then 'electron-rebuild bcrypt', then 'npm start'</p>
          </div>
          <h3>
            <li>Debugging</li>
          </h3>
          <div class='border p-3 mb-3 hide'>
            <pre><code class="language-js">
              mainWindow.webContents.openDevTools();
            </code></pre>
            The above line causes the dev tools open in renderer processes window. <br>
            <p>Node js create a web socket connection to a local http port for debugging .</p>
            <p>The command is `<b>electron -- inspect=&lt;my_desired_port_number, anything above 1023 works&gt; .</b>`</p>
            <p>To halt the debugger at the starting line of the main.js the command is `<b>electron --inspect-brk=5858 .</b>`</p>
            <p>To add the breakpoints the command is `<b>debugger;</b>`</p>
          </div>
          <h3>
            <li>Resetting the Project Code</li>
          </h3>
          <div class='border p-3 mb-3 hide'>
            <b>git reset --hard</b>
          </div>
    
        </ol>

        <%- include('./partials/bottom_controls.ejs') %>
        
    </div> 
    <%- include('./partials/scripts.ejs') %>
</body>

</html>