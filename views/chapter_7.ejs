<!doctype html>
<html lang='en'>

<head>
    <%- include('./partials/meta.ejs') %>
        <title>Features & Techniques</title>
        <%- include('./partials/style.ejs') %>

</head>

<body class='line-numbers'>
    <div class='container mt-3'>

        <h1 class='text-center'>Chapter 7: Features & Techniques</h1>
        <%- include('./partials/top_controls.ejs') %>

            <h2>Videos</h2>
            <ol>
                <h3>
                    <li>Offscreen Rendering</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>Offscreen Rendering <a
                            href="https://www.electronjs.org/docs/tutorial/offscreen-rendering">docs</a></p>
                    <p>Offscreen Rendering means load and render content into a browser window on a seperate thread,
                        meaning its not visible and that's why it's faster, a perfect solution for rendering a canvas
                        elelment or a 3d context.</p>
                    <p>Offscreen Rendering can run into two modes - cpu and gpu</p>
                    <p>To render 3d css animation the default mode i.e. gpu is preffered.</p>
                    <p>If the app is not required to render animation then cpu is the preffered option. We can disable
                        gpu in the following way:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        // In main.js before creating any window call the following on the app instance
                        app.disableHardwareAcceleration();

                        // and in the webPreferences, set offscreen to true:
                        webPreferences: {
                            nodeIntegration: true,
                            offscreen: true
                        }
                    </code>
                </pre>
                    <br>
                    <p>An example of offscreen rendering</p>
                    <pre>
                    <code class='language-js match-braces'>
                        function createWindow(){

                            // other imp codes 
                            
                            let i = 1;
                            mainWindow.webContents.on('paint', (e, dirty, image) => {
                                let screenshot = image.toPNG()
                                fs.writeFile(`${app.getPath('desktop')}/screenshot_folder/screenshot_${i}.png`, screenshot, console.log)
                                i++;
                            })

                            // other imp codes 

                        }
                    </code>
                </pre>

                </div>
                <h3>
                    <li>Network Detection</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>MDN Online & Offline Events <a
                            href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/Online_and_offline_events">docs</a>
                    </p>
                    <p>MDN onLine <a
                            href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine">docs</a></p>
                    <br>
                    <p>Getting network status:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        const statusNode = document.getElementById('status');

                        statusNode.innerText = navigator.onLine ? 'online' : 'offline'
                    </code>
                </pre>
                    <br>
                    <p>Eventlisteners to network changes:</p>
                    <pre>
                    <code class='language-js match-braces'>
                        const setStatus = status => {
                            const statusNode = document.getElementById('status');
                            statusNode.innerText = status ? 'online' : 'offline'
                        }
                    
                        setStatus(navigator.onLine)
                    
                        window.addEventListener('online', e => {
                          setStatus(true);
                        })
                        window.addEventListener('offline', e => {
                          setStatus(false);
                        })
                    </code>
                </pre>

                </div>
                <h3>
                    <li>Notifications</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>Guide Adding push notifications to a web app <a
                            href="https://developers.google.com/web/fundamentals/codelabs/push-notifications/">docs</a>
                    </p>
                    <p>MDN Notifications <a
                            href="https://developer.mozilla.org/en-US/docs/Web/API/notification">docs</a></p>
                    <p>Docs Notifications <a href="https://www.electronjs.org/docs/tutorial/notifications">docs</a></p>
                    <p>Module web-push <a href="https://github.com/web-push-libs/web-push">docs</a></p>
                    <p>Push.js <a href="https://pushjs.org/">docs</a></p>


                    <br>
                    <p>Simple notification:</p>
                    <pre>
                        <code class='language-js match-braces'>
                            new Notification('Electron App', {
                                body: 'This is a notification'
                            })
                        </code>
                    </pre>

                    <br>
                    <p>Adding click handler to the notification:</p>
                    <pre>
                        <code class='language-js match-braces'>
                            let notification = new Notification('Electron App', {
                                body: 'This is a notification'
                            })
                            notification.onclick = e => {
                            if( !self.isVisible() ) {
                                self.show();
                            }
                            }
                        </code>
                    </pre>

                    <br>
                    <p>Example: Show the app window when clicking the notification:</p>
                    <pre>
                        <code class='language-js match-braces'>
                            let notification = new Notification('Electron App', {
                                body: 'This is a notification'
                            })
                            notification.onclick = e => {
                                if( !self.isVisible() ) {
                                    self.show();
                                }
                            }
                        </code>
                    </pre>

                </div>
                <h3>
                    <li>Preload Scripts</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>4.1 Guide Security, Native Capabilities, and Your Responsibility <a
                            href="https://www.electronjs.org/docs/tutorial/security">docs</a></p>
                    <p>Moto is to modify node acceess from index.html in such a way that users' filesystem can not be
                        controlled maliciously.</p>
                    <p>Add the following:</p>
                    <pre>
                        <code class='language-js match-braces'>
                            mainWindow = new BrowserWindow({
                                width: 500, height: 500, x: 2000, y: 100,
                                webPreferences: {
                                  nodeIntegration: true,
                                  contextIsolation: false,
                                  preload: __dirname + '/preload.js'
                                }
                            })
                        </code>
                    </pre>
                    <p>Add the preload.js file to the __dirname folder</p>
                    <p>And associate the necessary properties and methods in the following ways with 'windows':</p>
                    <pre>
                        <code class='language-js match-braces'>
                            const { remote } = require('electron');
                            const fs = require('fs');
                            
                            const desktopPath = remote.app.getPath('desktop');
                            
                            window.writeToFile = text => {
                                fs.writeFile(desktopPath + '/app.txt', text, console.log);
                            }
                        </code>
                    </pre>

                </div>
                <h3>
                    <li>Progress Bar</li>
                </h3>
                <div class='border p-3 mb-3 hide'>
                    <p>Progress Bar <a href="https://www.electronjs.org/docs/tutorial/progress-bar">docs</a></p>
                    <p>From main.js: </p>
                    <pre>
                        <code class='language-js match-braces'>
                            mainWindow.setProgressBar(0.75);
                        </code>
                    </pre>
                    <p>The function take argument b/w 0 to 1 and a -ve number to remove the progress bar.</p>
                    <p>From index.html</p>
                    <pre>
                        <code class='language-js match-braces'>
                            const { remote } = require('electron');

                            const self = remote.getCurrentWindow()
                        
                            self.setProgressBar(0.25);
                        
                            let progress = 0.01;
                            let progressInterval = setInterval(() => {
                        
                              self.setProgressBar(progress);
                        
                              if (progress <= 1) {
                                self.setProgressBar(progress);
                                progress += 0.01
                              } else {
                                self.setProgressBar(-1);
                                clearInterval(progressInterval)
                              }
                            }, 100)
                        </code>
                    </pre>
                </div>

            </ol>

            <%- include('./partials/bottom_controls.ejs') %>

    </div>
    <%- include('./partials/scripts.ejs') %>
</body>

</html>